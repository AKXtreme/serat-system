{"version":3,"file":"static/js/334.1026c2c2.chunk.js","mappings":"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","sources":["components/Monitor/OperationLogs.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  Table,\n  Button,\n  Space,\n  Input,\n  message,\n  Tag,\n  Row,\n  Col,\n  DatePicker,\n  Select,\n  Descriptions,\n  Modal\n} from 'antd';\nimport {\n  ReloadOutlined,\n  EyeOutlined,\n  DeleteOutlined,\n  ExportOutlined,\n  SearchOutlined\n} from '@ant-design/icons';\nimport { monitorAPI } from '../../services/api';\nimport moment from 'moment';\n\nconst { Search } = Input;\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\n\nconst OperationLogs = () => {\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [selectedLog, setSelectedLog] = useState(null);\n  const [detailVisible, setDetailVisible] = useState(false);\n\n  useEffect(() => {\n    fetchLogs();\n  }, []);\n\n  const fetchLogs = async () => {\n    setLoading(true);\n    try {\n      const response = await monitorAPI.getOperationLogs();\n      if (response.data.code === 200) {\n        setLogs(response.data.rows || []);\n      }\n    } catch (error) {\n      message.error('Failed to fetch operation logs');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleView = (record) => {\n    setSelectedLog(record);\n    setDetailVisible(true);\n  };\n\n  const handleExport = async () => {\n    try {\n      const response = await monitorAPI.exportOperationLogs();\n      // Handle file download\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'operation_logs.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      message.success('Export successful');\n    } catch (error) {\n      message.error('Export failed');\n    }\n  };\n\n  const getStatusColor = (status) => {\n    return status === 0 ? 'green' : 'red';\n  };\n\n  const getStatusText = (status) => {\n    return status === 0 ? 'Success' : 'Failed';\n  };\n\n  const getOperTypeColor = (operType) => {\n    const colors = {\n      '1': 'blue',    // Insert\n      '2': 'green',   // Update\n      '3': 'red',     // Delete\n      '4': 'orange',  // Grant\n      '5': 'purple',  // Export\n      '6': 'cyan',    // Import\n      '7': 'gold',    // Force logout\n      '8': 'lime',    // Generate code\n      '9': 'magenta', // Clear data\n    };\n    return colors[operType] || 'default';\n  };\n\n  const getOperTypeText = (operType) => {\n    const types = {\n      '1': 'Insert',\n      '2': 'Update', \n      '3': 'Delete',\n      '4': 'Grant',\n      '5': 'Export',\n      '6': 'Import',\n      '7': 'Force Logout',\n      '8': 'Generate Code',\n      '9': 'Clear Data',\n    };\n    return types[operType] || 'Other';\n  };\n\n  // Sample data for demo\n  const sampleLogs = [\n    {\n      operId: 1,\n      title: 'User Management',\n      businessType: '2',\n      method: 'com.a.map.controller.system.SysUserController.edit()',\n      requestMethod: 'PUT',\n      operatorType: '1',\n      operName: 'admin',\n      deptName: 'IT Department',\n      operUrl: '/system/user',\n      operIp: '192.168.1.100',\n      operLocation: 'Internal Network',\n      operParam: '{\"userId\":1,\"userName\":\"admin\",\"status\":\"0\"}',\n      jsonResult: '{\"code\":200,\"msg\":\"success\"}',\n      status: 0,\n      errorMsg: '',\n      operTime: '2025-01-24 15:30:25',\n      costTime: 156\n    },\n    {\n      operId: 2,\n      title: 'Role Management',\n      businessType: '1',\n      method: 'com.a.map.controller.system.SysRoleController.add()',\n      requestMethod: 'POST',\n      operatorType: '1',\n      operName: 'admin',\n      deptName: 'IT Department',\n      operUrl: '/system/role',\n      operIp: '192.168.1.100',\n      operLocation: 'Internal Network',\n      operParam: '{\"roleName\":\"Test Role\",\"roleKey\":\"test\"}',\n      jsonResult: '{\"code\":200,\"msg\":\"success\"}',\n      status: 0,\n      errorMsg: '',\n      operTime: '2025-01-24 15:25:10',\n      costTime: 89\n    }\n  ];\n\n  const filteredLogs = (logs.length > 0 ? logs : sampleLogs).filter(log => {\n    if (!searchValue) return true;\n    return (\n      log.title.toLowerCase().includes(searchValue.toLowerCase()) ||\n      log.operName.toLowerCase().includes(searchValue.toLowerCase()) ||\n      log.operIp.includes(searchValue)\n    );\n  });\n\n  const columns = [\n    {\n      title: 'Operation ID',\n      dataIndex: 'operId',\n      key: 'operId',\n      width: 100,\n    },\n    {\n      title: 'System Module',\n      dataIndex: 'title',\n      key: 'title',\n    },\n    {\n      title: 'Operation Type',\n      dataIndex: 'businessType',\n      key: 'businessType',\n      render: (type) => (\n        <Tag color={getOperTypeColor(type)}>\n          {getOperTypeText(type)}\n        </Tag>\n      ),\n    },\n    {\n      title: 'Operator',\n      dataIndex: 'operName',\n      key: 'operName',\n    },\n    {\n      title: 'Department',\n      dataIndex: 'deptName',\n      key: 'deptName',\n      render: (text) => text || '-',\n    },\n    {\n      title: 'IP Address',\n      dataIndex: 'operIp',\n      key: 'operIp',\n    },\n    {\n      title: 'Location',\n      dataIndex: 'operLocation',\n      key: 'operLocation',\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      render: (status) => (\n        <Tag color={getStatusColor(status)}>\n          {getStatusText(status)}\n        </Tag>\n      ),\n    },\n    {\n      title: 'Operation Time',\n      dataIndex: 'operTime',\n      key: 'operTime',\n      width: 180,\n      sorter: (a, b) => moment(a.operTime).unix() - moment(b.operTime).unix(),\n    },\n    {\n      title: 'Cost Time',\n      dataIndex: 'costTime',\n      key: 'costTime',\n      render: (time) => `${time}ms`,\n      sorter: (a, b) => a.costTime - b.costTime,\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 120,\n      render: (_, record) => (\n        <Space size=\"small\">\n          <Button\n            type=\"link\"\n            icon={<EyeOutlined />}\n            onClick={() => handleView(record)}\n            size=\"small\"\n          >\n            View\n          </Button>\n        </Space>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <Card title=\"Operation Logs\" style={{ marginBottom: 16 }}>\n        <Row gutter={[16, 16]} justify=\"space-between\" align=\"middle\">\n          <Col span={8}>\n            <Search\n              placeholder=\"Search by module, operator, or IP\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              style={{ width: '100%' }}\n            />\n          </Col>\n          <Col>\n            <Space>\n              <Button\n                icon={<ExportOutlined />}\n                onClick={handleExport}\n              >\n                Export\n              </Button>\n              <Button\n                icon={<ReloadOutlined />}\n                onClick={fetchLogs}\n              >\n                Refresh\n              </Button>\n            </Space>\n          </Col>\n        </Row>\n      </Card>\n\n      <Card>\n        <Table\n          columns={columns}\n          dataSource={filteredLogs}\n          rowKey=\"operId\"\n          loading={loading}\n          pagination={{\n            pageSize: 10,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: (total, range) =>\n              `${range[0]}-${range[1]} of ${total} items`,\n          }}\n        />\n      </Card>\n\n      {/* Log Detail Modal */}\n      {selectedLog && (\n        <Modal\n          title=\"Operation Log Details\"\n          visible={detailVisible}\n          onCancel={() => setDetailVisible(false)}\n          footer={[\n            <Button key=\"close\" onClick={() => setDetailVisible(false)}>\n              Close\n            </Button>\n          ]}\n          width={800}\n        >\n          <Descriptions bordered column={2}>\n            <Descriptions.Item label=\"Operation ID\">{selectedLog.operId}</Descriptions.Item>\n            <Descriptions.Item label=\"System Module\">{selectedLog.title}</Descriptions.Item>\n            <Descriptions.Item label=\"Operation Type\">\n              <Tag color={getOperTypeColor(selectedLog.businessType)}>\n                {getOperTypeText(selectedLog.businessType)}\n              </Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Request Method\">\n              <Tag color=\"blue\">{selectedLog.requestMethod}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Operator\">{selectedLog.operName}</Descriptions.Item>\n            <Descriptions.Item label=\"Department\">{selectedLog.deptName || '-'}</Descriptions.Item>\n            <Descriptions.Item label=\"Request URL\" span={2}>\n              <code>{selectedLog.operUrl}</code>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"IP Address\">{selectedLog.operIp}</Descriptions.Item>\n            <Descriptions.Item label=\"Location\">{selectedLog.operLocation}</Descriptions.Item>\n            <Descriptions.Item label=\"Status\">\n              <Tag color={getStatusColor(selectedLog.status)}>\n                {getStatusText(selectedLog.status)}\n              </Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Cost Time\">{selectedLog.costTime}ms</Descriptions.Item>\n            <Descriptions.Item label=\"Operation Time\" span={2}>\n              {selectedLog.operTime}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Method Name\" span={2}>\n              <code style={{ fontSize: '12px' }}>{selectedLog.method}</code>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Request Parameters\" span={2}>\n              <pre style={{ \n                background: '#f5f5f5', \n                padding: '8px', \n                borderRadius: '4px',\n                fontSize: '12px',\n                maxHeight: '200px',\n                overflow: 'auto'\n              }}>\n                {JSON.stringify(JSON.parse(selectedLog.operParam || '{}'), null, 2)}\n              </pre>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Response Result\" span={2}>\n              <pre style={{ \n                background: '#f5f5f5', \n                padding: '8px', \n                borderRadius: '4px',\n                fontSize: '12px',\n                maxHeight: '200px',\n                overflow: 'auto'\n              }}>\n                {JSON.stringify(JSON.parse(selectedLog.jsonResult || '{}'), null, 2)}\n              </pre>\n            </Descriptions.Item>\n            {selectedLog.errorMsg && (\n              <Descriptions.Item label=\"Error Message\" span={2}>\n                <div style={{ color: 'red' }}>{selectedLog.errorMsg}</div>\n              </Descriptions.Item>\n            )}\n          </Descriptions>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default OperationLogs;\n"],"names":["Search","Input","RangePicker","DatePicker","Option","Select","OperationLogs","logs","setLogs","useState","loading","setLoading","searchValue","setSearchValue","selectedLog","setSelectedLog","detailVisible","setDetailVisible","useEffect","fetchLogs","async","response","monitorAPI","getOperationLogs","data","code","rows","error","message","getStatusColor","status","getStatusText","getOperTypeColor","operType","getOperTypeText","filteredLogs","length","operId","title","businessType","method","requestMethod","operatorType","operName","deptName","operUrl","operIp","operLocation","operParam","jsonResult","errorMsg","operTime","costTime","filter","log","toLowerCase","includes","columns","dataIndex","key","width","render","type","_jsx","Tag","color","children","text","sorter","a","b","moment","unix","time","_","record","Space","size","Button","icon","EyeOutlined","onClick","handleView","_jsxs","Card","style","marginBottom","Row","gutter","justify","align","Col","span","placeholder","value","onChange","e","target","ExportOutlined","exportOperationLogs","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","success","ReloadOutlined","Table","dataSource","rowKey","pagination","pageSize","showSizeChanger","showQuickJumper","showTotal","total","range","Modal","visible","onCancel","footer","Descriptions","bordered","column","Item","label","fontSize","background","padding","borderRadius","maxHeight","overflow","JSON","stringify","parse"],"sourceRoot":""}